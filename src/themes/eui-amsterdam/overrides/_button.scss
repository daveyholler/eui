// This file has lots of modifiers and is somewhat nesty by nature
//sass-lint:disable nesting-depth

// Our base button
.euiButton {
  @include euiButton;
  box-shadow: none !important;
  border-radius: $euiBorderRadius + 2;
  min-width: $euiButtonMinWidth;

  .euiButton__content {
    @include euiButtonContent;

    padding: 0 ($euiSize - $euiSizeXS);
  }

  .euiButton__text {
    text-overflow: ellipsis;
    overflow: hidden;
  }

  &.euiButton--small {
    height: $euiButtonHeightSmall;
    line-height: $euiButtonHeightSmall; // prevents descenders from getting cut off
    &:not(.euiButtonToggle) {
      border-radius: $euiBorderRadius;
    }
  }

  &.euiButton--iconRight {
    .euiButton__content {
      @include euiButtonContent($isReverse: true);
    }
  }

  &:hover,
  &:active {
    @include euiSlightShadowHover;
  }

  &:enabled {
    &:hover,
    &:focus {
      background-color: transparentize($euiColorPrimary, .9);
    }
  }

  &:disabled {
    color: $euiColorMediumShade;
    background-color: transparentize($euiColorDarkShade, .9);
    border-color: transparent;
    pointer-events: none;

    .euiButton__content {
      pointer-events: auto;
      cursor: not-allowed;
    }

    &.euiButton--fill {
      color: $euiColorGhost;
      background-color: $euiButtonColorDisabled;
      border-color: $euiButtonColorDisabled;

      &:hover,
      &:focus {
        background-color: $euiButtonColorDisabled;
        border-color: $euiButtonColorDisabled;
      }
    }

    &:hover,
    &:focus {
      @include euiSlightShadow;

      text-decoration: none;
    }
  }
}

// Create button modifiers based upon the map.
@each $name, $color in $euiButtonTypes {
  .euiButton--#{$name} {
    @if ($name == 'ghost') {
      // Ghost is unique and ALWAYS sits against a dark background.
      color: $color;
    } @else if ($name == 'text') {
      // The default color is lighter than the normal text color, make the it the text color
      color: $euiTextColor;
    } @else {
      // Other colors need to check their contrast against the page background color.
      color: darken($color, 10%);
    }

    background-color: transparentize($color, .8);

    &.euiButton--fill {
      // The function makes that hexes safe for theming
      $fillTextColor: chooseLightOrDarkText($color, $euiColorGhost, $euiColorInk);

      color: $fillTextColor;
      background-color: $color;


      &:enabled {
        &:hover,
        &:focus {
          background-color: darken($color, 5%);
          border-color: darken($color, 5%);
        }
      }

      &:disabled .euiButton__spinner {
        border-color: euiLoadingSpinnerBorderColors(transparentize($fillTextColor, .3));
      }
    }

    &:enabled {

      &:hover,
      &:focus {
        $shadowColor: $euiShadowColor;
        @if ($name == 'ghost') {
          $shadowColor: $euiColorInk;
        } @else if (lightness($euiTextColor) < 50) {
          // Only if this is the light theme do we use the button variant color to colorize the shadow
          $shadowColor: desaturate($color, 60%);
        }

        @include euiSlightShadowHover($shadowColor);
        background-color: transparentize($color, .9);

        @if ($name == 'disabled') {
          cursor: not-allowed;
        }
      }
    }

    &:disabled,
    &:disabled:hover,
    &:disabled:focus {
      @if ($name == 'ghost') {
        @include euiSlightShadow($euiColorInk);
      }
    }
  }
}

.euiButton--fullWidth {
  display: block;
  width: 100%;
}
